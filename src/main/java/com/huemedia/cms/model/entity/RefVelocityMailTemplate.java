package com.huemedia.cms.model.entity;


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;

/**
 * RefVelocityMailTemplate generated by hbm2java
 */
@Entity
@Table(name="ref_velocity_mail_template"
)
public class RefVelocityMailTemplate  implements java.io.Serializable {


     private String id;
     private Date timestamp;
     private String name;
     private String content;
     private String createBy;
     private Date createDate;
     private Set<Notification> notificationsForAssigneeTemplate = new HashSet<Notification>(0);
     private Set<Notification> notificationsForHelpdeskTemplate = new HashSet<Notification>(0);
     private Set<Notification> notificationsForSupervisorTemplate = new HashSet<Notification>(0);
     private Set<Notification> notificationsForManagerTemplate = new HashSet<Notification>(0);
     private Set<Notification> notificationsForComplainantTemplate = new HashSet<Notification>(0);
     private Set<Notification> notificationsForAllSupervisorTemplate = new HashSet<Notification>(0);

    public RefVelocityMailTemplate() {
    }

	
    public RefVelocityMailTemplate(String id, String name) {
        this.id = id;
        this.name = name;
    }
    public RefVelocityMailTemplate(String id, String name, String content, String createBy, Date createDate, Set<Notification> notificationsForAssigneeTemplate, Set<Notification> notificationsForHelpdeskTemplate, Set<Notification> notificationsForSupervisorTemplate, Set<Notification> notificationsForManagerTemplate, Set<Notification> notificationsForComplainantTemplate, Set<Notification> notificationsForAllSupervisorTemplate) {
       this.id = id;
       this.name = name;
       this.content = content;
       this.createBy = createBy;
       this.createDate = createDate;
       this.notificationsForAssigneeTemplate = notificationsForAssigneeTemplate;
       this.notificationsForHelpdeskTemplate = notificationsForHelpdeskTemplate;
       this.notificationsForSupervisorTemplate = notificationsForSupervisorTemplate;
       this.notificationsForManagerTemplate = notificationsForManagerTemplate;
       this.notificationsForComplainantTemplate = notificationsForComplainantTemplate;
       this.notificationsForAllSupervisorTemplate = notificationsForAllSupervisorTemplate;
    }
   
     @Id 

    
    @Column(name="id", unique=true, nullable=false, length=100)
    public String getId() {
        return this.id;
    }
    
    public void setId(String id) {
        this.id = id;
    }

    @Version@Temporal(TemporalType.TIMESTAMP)
    @Column(name="timestamp", length=19)
    public Date getTimestamp() {
        return this.timestamp;
    }
    
    public void setTimestamp(Date timestamp) {
        this.timestamp = timestamp;
    }

    
    @Column(name="name", nullable=false, length=100)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    
    @Column(name="content")
    public String getContent() {
        return this.content;
    }
    
    public void setContent(String content) {
        this.content = content;
    }

    
    @Column(name="create_by", length=50)
    public String getCreateBy() {
        return this.createBy;
    }
    
    public void setCreateBy(String createBy) {
        this.createBy = createBy;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="create_date", length=19)
    public Date getCreateDate() {
        return this.createDate;
    }
    
    public void setCreateDate(Date createDate) {
        this.createDate = createDate;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="refVelocityMailTemplateByAssigneeTemplate")
    public Set<Notification> getNotificationsForAssigneeTemplate() {
        return this.notificationsForAssigneeTemplate;
    }
    
    public void setNotificationsForAssigneeTemplate(Set<Notification> notificationsForAssigneeTemplate) {
        this.notificationsForAssigneeTemplate = notificationsForAssigneeTemplate;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="refVelocityMailTemplateByHelpdeskTemplate")
    public Set<Notification> getNotificationsForHelpdeskTemplate() {
        return this.notificationsForHelpdeskTemplate;
    }
    
    public void setNotificationsForHelpdeskTemplate(Set<Notification> notificationsForHelpdeskTemplate) {
        this.notificationsForHelpdeskTemplate = notificationsForHelpdeskTemplate;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="refVelocityMailTemplateBySupervisorTemplate")
    public Set<Notification> getNotificationsForSupervisorTemplate() {
        return this.notificationsForSupervisorTemplate;
    }
    
    public void setNotificationsForSupervisorTemplate(Set<Notification> notificationsForSupervisorTemplate) {
        this.notificationsForSupervisorTemplate = notificationsForSupervisorTemplate;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="refVelocityMailTemplateByManagerTemplate")
    public Set<Notification> getNotificationsForManagerTemplate() {
        return this.notificationsForManagerTemplate;
    }
    
    public void setNotificationsForManagerTemplate(Set<Notification> notificationsForManagerTemplate) {
        this.notificationsForManagerTemplate = notificationsForManagerTemplate;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="refVelocityMailTemplateByComplainantTemplate")
    public Set<Notification> getNotificationsForComplainantTemplate() {
        return this.notificationsForComplainantTemplate;
    }
    
    public void setNotificationsForComplainantTemplate(Set<Notification> notificationsForComplainantTemplate) {
        this.notificationsForComplainantTemplate = notificationsForComplainantTemplate;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="refVelocityMailTemplateByAllSupervisorTemplate")
    public Set<Notification> getNotificationsForAllSupervisorTemplate() {
        return this.notificationsForAllSupervisorTemplate;
    }
    
    public void setNotificationsForAllSupervisorTemplate(Set<Notification> notificationsForAllSupervisorTemplate) {
        this.notificationsForAllSupervisorTemplate = notificationsForAllSupervisorTemplate;
    }




}


